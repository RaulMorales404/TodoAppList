@page "/"
@using System
@using TodoApp.Helpers
@using TodoApp.interfaces
@inject IJSRuntime JSRuntime

<PageTitle>Inicio</PageTitle>

<div class="mt-5">
    <div class="d-flex justify-content-between align-items-center">
        <h1 class="display-3" style="color: grey;">Tareas</h1>
        <button style="cursor: pointer;" type="button"
                @onclick="() => ShowModal(true, 1)"
                class="btn btn-outline-dark btn-lg">
            Agregar
        </button>
    </div>
    <hr style="margin: 0;" />
</div>

<div class="accordion accordion-flush mt-5" id="accordionFlushExample">
    @foreach (var task in tasks)
    {
        double completedPercentage = GetPercentTasksCompleted(task.SubTasks);

        <div class="accordion-item title">
            <h2 class="accordion-header">
                <button  style="cursor: pointer;" class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-@task.Id" aria-expanded="false" aria-controls="collapse-@task.Id">
                    <div style="width: 95%;" class="containerTitle">
                        <div class="d-flex flex-row justify-content-between align-items-center">
                            <div style="width: 100%;" class="d-flex flex-row justify-content-between align-items-center">
                                <span class="mb-1">@task.Title (@completedPercentage%)</span>
                                <small class="text-muted">Created: @task.TaskCreate.ToString("dd/MM/yyyy")</small>
                            </div>
                        </div>
                        <div class="progress mt-2" style="height: 10px; background-color: #e0e0e0; margin-bottom: 10px;">
                            <div class="progress-bar bg-dark" role="progressbar" style="width: @completedPercentage%;" aria-valuenow="@completedPercentage" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                    </div>
                </button>
                <div class="btn-group">
                    <i class="bi bi-three-dots-vertical" style="cursor: pointer;" data-bs-toggle="dropdown" aria-expanded="false"></i>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" style="cursor: pointer;"  @onclick="() => {
                                                                   idTask = task.Id;
                                                                   ShowModaleSubTak();

                                                               }">Agregar sub tarea</a></li>
                        <li class="mt-1"><a style="cursor: pointer;" @onclick="() => {
                                                          taskTitle = task.Title;
                                                           idTask = task.Id;
                                                          ShowModal(true, 3);
                                                          }" class="dropdown-item">Editar</a></li>
                        <li class="mt-1"><a style="cursor: pointer;" class="dropdown-item pointer" >Cancelar</a></li>
                        <li class="mt-1">
                            <a class="dropdown-item text-danger" style="cursor: pointer;"  @onclick="() => {
                                                                                         idTask = task.Id;
                                                                                            ShowModal(true, 4);
                                                                                        }">Eliminar</a>
                        </li>
                    </ul>
                </div>
            </h2>

            <div id="collapse-@task.Id" class="accordion-collapse collapse" data-bs-parent="#accordionFlushExample">
                <div class="accordion-body">
                    <div class="accordion accordion-flush" id="nestedAccordion-@task.Id">
                        @if (task.SubTasks == null || !task.SubTasks.Any())
                        {
                            <div class="d-flex justify-content-center align-items-center p-3" style="flex: 1; height: 100%;">
                                <div class="text-center">
                                    <h1 class="display-5" style="color: grey;">No tienes sub tareas aún</h1>
                                    <button type="button" style="cursor: pointer;" class="btn btn-outline-info btn-lg mt-2" @onclick="() => {
                                                                                                                 idTask = task.Id;
                                                                                                                 ShowModaleSubTak();
                                                                                                             }">Agregar sub tarea</button>
                                </div>
                            </div>
                        }
                        else
                        {
                            @foreach (var subTask in task.SubTasks)
                            {
                                <div class="accordion-item">
                                    <h2 class="accordion-header">
                                        <button class="accordion-button collapsed" style="cursor: pointer;" type="button" data-bs-toggle="collapse" data-bs-target="#nestedFlush-collapse-@subTask.Id" aria-expanded="false" aria-controls="nestedFlush-collapse-@subTask.Id">
                                            <div style="width: 97%;" class="containerTitle">
                                                <div class="d-flex flex-row justify-content-between align-items-center">
                                                    <div style="width: 100%;" class="d-flex flex-row justify-content-between align-items-center">
                                                        <div>
                                                            <div class="list-group-item d-flex justify-content-between align-items-center">
                                                                <div class="form-check">
                                                                    <input class="form-check-input" type="checkbox" value="" checked="@subTask.IsCompleted"
                                                                           @onclick="()=>ToggleSubTaskCompletion(task.Id, subTask.Id)">
                                                                    <label class="form-check-label text-dark">
                                                                        @subTask.Title
                                                                    </label>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </button>

                                        <div style="cursor: pointer;" class="buttons actions">
                                            <button @onclick="() => {
                                                                  idTask = task.Id;
                                                                  idSubTak = subTask.Id;
                                                                  taskTitle = subTask.Title;
                                                                  taskDescription = subTask.Description;
                                                                  isNotisTaskCompleted = subTask.IsCompleted?true:false;
                                                                  isTaskCompleted = subTask.IsCompleted?true:false;
                                                                  HandleCheckboxChange();
                                                                  statusAction = '6';
                                                                  ShowModaleSubTak();

                                                              }" class="btn btn-default">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button style="cursor: pointer;"  @onclick="() => {
                                                          idTask = task.Id;
                                                         idSubTak = subTask.Id;
                                                        ShowModal(true, 5);
                                                        }" class="btn btn-default">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </h2>
                                    <div id="nestedFlush-collapse-@subTask.Id" class="accordion-collapse collapse" data-bs-parent="#nestedAccordion-@task.Id">
                                        <div class="accordion-body">
                                            @subTask.Description
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<Modal IsVisible="isModalVisible" OnClose="CloseModal">
    <Title>@modalTitle</Title>
    <Body>
        @if (statusAction == 4 || statusAction == 5)
        {
            <h5 style="color: grey; font-weight: 400;" class="modal-title">Estas apunto de <span class="text-danger">Eliminar </span> esta tarea</h5>
        }
           else { 
       
            <p>Por favor, ingresa el título de la tarea:</p>
            <div class="form-floating mb-3">
                <input type="text" class="form-control" id="floatingInput" @bind="taskTitle" placeholder="Título de la tarea">
                <label for="floatingInput">Título de la tarea</label>
            </div>
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-2">@errorMessage</div>
        }
    </Body>
    <Footer>
        @if (statusAction == 4 || statusAction == 5)
        {
            <button type="button" style="cursor: pointer;" class="btn btn-outline-dark" @onclick="CloseModal">Cancelar</button>
            <button type="button" style="cursor: pointer;"  class="btn btn-outline-danger" @onclick="()=>DeleteTask(idTask)">Eliminar</button>
        }
        else
        {
            <button type="button" style="cursor: pointer;" class="btn btn-outline-dark" @onclick="CloseModal">Cancelar</button>
            <button type="button"  style="cursor: pointer;" class="btn btn-dark" @onclick="OnSaveClick">Guardar</button>

        }
    </Footer>
</Modal>





<Modal IsVisible="@isModalVisibleSubTak" OnClose="CloseModaleSubTak">
    <Title>
        @(statusAction == '6' ? "Actualizar sub Tarea" : "Agregar sup tarea")
    </Title>
    <Body>
       

        <p>Por favor, rellena todos los campos:</p>
        <div class="form-floating mb-3">
            <input type="text" class="form-control" id="floatingInput" @bind="taskTitle" placeholder="Título de la tarea">
            <label for="floatingInput">Título de la tarea</label>
        </div>
        <div class="form-floating">
            <textarea class="form-control" placeholder="Descripcion" id="floatingTextarea2" style="height: 100px" @bind="taskDescription"></textarea>
            <label for="floatingTextarea2">Descripción</label>
        </div>
        <div class="mt-2">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="flexCheckDefault" @bind="isNotisTaskCompleted" @onclick="HandleCheckboxChange">
                <label class="form-check-label" for="flexCheckDefault">
                    Por hacer
                </label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="flexCheckChecked" @bind="isTaskCompleted" @onclick="HandleCheckboxChange">
                <label class="form-check-label" for="flexCheckChecked">
                    Realizada
                </label>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-2">@errorMessage</div>
        }
    </Body>
    <Footer>
        @if (statusAction == '6')
        {
            <button type="button" style="cursor: pointer;" class="btn btn-outline-dark" @onclick="CloseModaleSubTak">Cancelar</button>
            <button type="button" style="cursor: pointer;" class="btn btn-dark" @onclick="()=>UpdateSubTask()">Actualizar</button>
        }
        else
        {

            <button type="button" style="cursor: pointer;" class="btn btn-outline-dark" @onclick="CloseModaleSubTak">Cancelar</button>
            <button type="button" style="cursor: pointer;" class="btn btn-dark" @onclick="AddSubTask">Guardar</button>
        }
    </Footer>
</Modal>

@code {
    private bool isNotisTaskCompleted = true;
    private bool isTaskCompleted = false;

    private string taskDescription { get; set; } = string.Empty;
    private string taskTitle { get; set; } = string.Empty;
    private string idSubTak = string.Empty;
    private string idTask = string.Empty;
    private bool isModalVisible = false;
    private bool isModalVisibleSubTak = false;
    private int statusAction = 0;
    private string modalTitle = "modal";
    public string errorMessage { get; set; } = string.Empty;

    private List<TaskItem> tasks = new List<TaskItem>
{
        new TaskItem
        {
            Id = "1",
            Title = "Crear anarvar",
            TaskCreate = new DateTime(2024, 8, 27),
            SubTasks = new List<SubTask>
    {
                new SubTask { Id = "0", Title = "Subtask Alpha", Description = "Initial task details", IsCompleted = true },
                new SubTask { Id = "1", Title = "Subtask Beta", Description = "Follow-up task details", IsCompleted = true },
                new SubTask { Id = "2", Title = "Subtask Gamma", Description = "Further task details", IsCompleted = false },
                new SubTask { Id = "3", Title = "Subtask Delta", Description = "Final task details", IsCompleted = false }
            }
        },
        new TaskItem
        {
            Id = "2",
            Title = "Validaciones de Back",
            TaskCreate = new DateTime(2024, 8, 28),
            SubTasks = new List<SubTask>
    {
                new SubTask { Id = "0", Title = "Task A", Description = "Setup task information", IsCompleted = false },
                new SubTask { Id = "1", Title = "Task B", Description = "Development task information", IsCompleted = false },
                new SubTask { Id = "2", Title = "Task C", Description = "Testing task information", IsCompleted = false },
                new SubTask { Id = "3", Title = "Task D", Description = "Deployment task information", IsCompleted = false }
            }
        },
        new TaskItem
        {
            Id = "3",
            Title = "Cambiar textos",
            TaskCreate = new DateTime(2024, 8, 29),
            SubTasks = new List<SubTask>
    {
                new SubTask { Id = "0", Title = "Phase 1", Description = "Planning phase details", IsCompleted = true },
                new SubTask { Id = "1", Title = "Phase 2", Description = "Execution phase details", IsCompleted = true },
                new SubTask { Id = "2", Title = "Phase 3", Description = "Review phase details", IsCompleted = true },
                new SubTask { Id = "3", Title = "Phase 4", Description = "Completion phase details", IsCompleted = false }
            }
        }
    };

    private void ShowModal(bool visible, int titleIndex)
    {
        isModalVisible = visible;
        statusAction = titleIndex;

        switch (titleIndex)
        {
            case 1:
                modalTitle = "Agregar una nueva tarea";
                break;
            case 2:
                modalTitle = "Agregar una sub tarea";
                break;
            case 3:
                modalTitle = "Editar tarea";
                break;
            case 6:
                modalTitle = "Editar sub tarea";
                break;
            case 4:
                modalTitle = "Eliminar tarea";
                break;
            case 5:
                modalTitle = "Eliminar sub tarea";
                break;
            default:
                modalTitle = "Título por defecto";
                break;
        }
    }



    private void ShowModaleSubTak()
    {
        errorMessage = string.Empty;
        isModalVisibleSubTak = true;

    }
    private void CloseModaleSubTak()
    {
        errorMessage = string.Empty;
        isModalVisibleSubTak = false;
        ClenaEdit();
    }

    private void CloseModal()
    {
        errorMessage = string.Empty;
        isModalVisible = false;
        ClenaEdit();

    }

    //crear Tareas
    public async void SubmitTask()
    {
        if (statusAction == 1 || statusAction == 2 || statusAction == 3 || statusAction == 6)
        {
            if (string.IsNullOrWhiteSpace(taskTitle))
            {
                errorMessage = "El título de la tarea no puede estar vacío.";
                return;
            }

            // Restablecer el mensaje de error si la validacion es exitosa
            errorMessage = string.Empty;

            if (statusAction == 1)
            {

                AddNewTaskAtStart(taskTitle);
                await JSRuntime.ToastrSuccess("Tarea agregada con éxito.");
            }

            // Restablecer el campo de titulo despues de usarlo
            taskTitle = string.Empty;
        }
        else if (statusAction == 4 || statusAction == 5)
        {
            // Lógica para eliminar una tarea/subtarea 
            await JSRuntime.ToastrSuccess("Tarea eliminada con éxito.");
        }

        // Cerrar el modal después de la acción
        CloseModal();
    }

    private void AddNewTaskAtStart(string title)
    {
        // Generar un nuevo ID único
        string newId = (tasks.Count + 1).ToString();

        // Crear un nuevo TaskItem
        var newTask = new TaskItem
        {
            Id = newId,
            Title = title,
            TaskCreate = DateTime.Now,
            SubTasks = new List<SubTask>() // Por ahora sin subtareas
        };

        // Agregar la nueva tarea al inicio de la lista
        tasks.Insert(0, newTask);
        taskTitle = string.Empty;
        CloseModal();
    }



    private int GetPercentTasksCompleted(List<SubTask> subTasks)
    {
        if (subTasks == null || subTasks.Count == 0)
        {
            return 0;
        }

        int completedTasks = subTasks.Count(st => st.IsCompleted);
        int percentage = (int)((double)completedTasks / subTasks.Count * 100);
        return percentage;


    }


    public async void DeleteTask(string taskId)
    {
        if (statusAction == 5)
        {
            DeleteSubTask(idTask, idSubTak);
        }
        else
        {
            var task = tasks.FirstOrDefault(t => t.Id == taskId);

            if (task == null)
            {
                await JSRuntime.ToastrError("La tarea no se encontró.");
                return;
            }

            if (task.SubTasks != null && task.SubTasks.Any())
            {
                CloseModal();
                await JSRuntime.ToastrError("No se puede eliminar una tarea que tiene subtareas.");
                return;
            }
            CloseModal();
            tasks.Remove(task);
            await JSRuntime.ToastrSuccess($"La tarea '{task.Title}' ha sido eliminada con éxito.");
        }

    }

    public async void DeleteSubTask(string taskId, string subTaskId)
    {
        var task = tasks.FirstOrDefault(t => t.Id == taskId);

        if (task == null)
        {
            await JSRuntime.ToastrError("La tarea no se encontró.");
            return;
        }

        var subTask = task.SubTasks.FirstOrDefault(st => st.Id == subTaskId);

        if (subTask == null)
        {
            CloseModal();
            await JSRuntime.ToastrError("La subtarea no se encontró.");
            return;
        }
        CloseModal();
        task.SubTasks.Remove(subTask);
        await JSRuntime.ToastrSuccess($"La subtarea '{subTask.Title}' ha sido eliminada con éxito.");
    }


    //AddSubTask(string taskId, string subTaskTitle, string subTaskDescription)

    public async void AddSubTask()
    {

        // Verificar que no sea vacio
        if (string.IsNullOrWhiteSpace(taskTitle) || string.IsNullOrWhiteSpace(taskDescription))
        {
            errorMessage = "El título de la subtarea no puede estar vacío.";
            return;
        }

        var task = tasks.FirstOrDefault(t => t.Id == idTask);

        if (task == null)
        {
            CloseModaleSubTak();
            ClenaEdit();
            await JSRuntime.ToastrError("La tarea no se encontró.");
            return;
        }

        // Generar un nuevo id
        string newSubTaskId = (task.SubTasks.Count + 1).ToString();

        // Crear una nueva subtarea
        var newSubTask = new SubTask
        {
            Id = newSubTaskId,
            Title = taskTitle,
            Description = taskDescription,
            IsCompleted = isTaskCompleted ? true : false,// Por defecto, la subtarea no está completada
        };
        errorMessage = string.Empty;
        // Agregar la nueva subtarea a la tarea correspondiente
        CloseModaleSubTak();
        task.SubTasks.Add(newSubTask);
        await JSRuntime.ToastrSuccess($"La subtarea '{newSubTask.Title}' ha sido agregada con éxito a la tarea '{task.Title}'.");

        ClenaEdit();

        // Cerrar el modal después de la acción

    }

    public void ClenaEdit()
    {
        isNotisTaskCompleted = true;
        taskTitle = string.Empty;
        taskDescription = string.Empty;
        isTaskCompleted = false;
        idSubTak = string.Empty;
        idTask = string.Empty;
        statusAction = 0;

    }

    public async void ToggleSubTaskCompletion(string taskId, string subTaskId)
    {
        var task = tasks.FirstOrDefault(t => t.Id == taskId);

        if (task != null)
        {
            var subTask = task.SubTasks.FirstOrDefault(st => st.Id == subTaskId);

            if (subTask != null)
            {
                // Cambia el estado de la subtarea
                subTask.IsCompleted = !subTask.IsCompleted;
                await JSRuntime.ToastrSuccess($"La subtarea '{subTask.Title}' ha sido agregada con éxito a la tarea '{task.Title}'.");
                // Actualiza la lista de tareas para reflejar el cambio
                tasks = tasks.Select(t =>
                {
                    if (t.Id == taskId)
                    {
                        t.SubTasks = t.SubTasks.Select(st =>
                        {
                            if (st.Id == subTaskId)
                            {
                                st.IsCompleted = subTask.IsCompleted;
                            }
                            return st;
                        }).ToList();
                    }
                    return t;
                }).ToList();
            }
        }
    }


    private void HandleCheckboxChange()
    {

        if (isNotisTaskCompleted) {
            isTaskCompleted = true;
            isNotisTaskCompleted = false;

        } else {
            isNotisTaskCompleted = true;
            isTaskCompleted = false;

        }
    }


    public async void UpdateTask()
    {

        if (string.IsNullOrWhiteSpace(taskTitle))
        {
            errorMessage = "El título de la tarea no puede estar vacío.";
            return;
        }

        var task = tasks.FirstOrDefault(t => t.Id == idTask);

        if (task == null)
        {

            await JSRuntime.ToastrError("La tarea no se encontró.");
            return;
        }

        // Actualizar el título de la tarea
        task.Title = taskTitle;
        errorMessage = string.Empty;
        // Aquí puedes actualizar otros campos de la tarea si es necesario
        CloseModal();
        await JSRuntime.ToastrSuccess($"La tarea '{task.Title}' ha sido actualizada con éxito.");

        // Limpiar los campos y cerrar el modal
        ClenaEdit();

    }

    public async void UpdateSubTask()
    {
        // Verificar que el título de la subtarea no esté vacío
        if (string.IsNullOrWhiteSpace(taskTitle) || string.IsNullOrWhiteSpace(taskDescription))
        {
            errorMessage = "El título de la subtarea no puede estar vacío.";
            return;
        }

        var task = tasks.FirstOrDefault(t => t.Id == idTask);

        if (task == null)
        {

            await JSRuntime.ToastrError("La tarea no se encontró.");
            return;
        }

        var subTask = task.SubTasks.FirstOrDefault(st => st.Id == idSubTak);

        if (subTask == null)
        {

            await JSRuntime.ToastrError("La subtarea no se encontró.");
            return;
        }
        errorMessage = string.Empty;

        // Actualizar el título y la descripción de la subtarea
        subTask.Title = taskTitle;
        subTask.Description = taskDescription;
        subTask.IsCompleted = isTaskCompleted;
        CloseModaleSubTak();
        await JSRuntime.ToastrSuccess($"La subtarea '{subTask.Title}' ha sido actualizada con éxito.");

        // Limpiar los campos y cerrar el modal
        ClenaEdit();
        CloseModaleSubTak();
    }



    private void OnSaveClick()
    {
        if (statusAction == 3)
        {
            UpdateTask();
        }
        else
        {
            SubmitTask();
        }
    }



    }
